#workflow deployment for JAVA SPRING BOOT APP

name: Build and deploy Java project to Azure Server

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
  workflow_dispatch:

env:
  USERNAME_SERVER: 'ubuntuAdmin'
  PACKAGE_DIRECTORY: '.' # set this to the directory which contains pom.xml file
  JAVA_VERSION: '11' # set this to the java version to use
  PORT: '8081' #Spring Boot App port

jobs:
  build-java-app:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3

      - name: Setup Java Sdk ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Build Maven
        run: |
          cd './${{ env.PACKAGE_DIRECTORY }}'
          ls
          rm ./src/main/resources/application.properties
          cat >>./src/main/resources/application.properties <<END
          spring.datasource.url=$JDBC_DATABASE_URL
          spring.datasource.username=$JDBC_DATABASE_USERNAME
          spring.datasource.password=$JDBC_DATABASE_PASSWORD
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
          logging.level.org.hibernate.SQL=debug
          server.port=$PORT
          END
          cat ./src/main/resources/application.properties
          mvn clean package
        env:
          JDBC_DATABASE_URL: ${{ secrets.JDBC_DATABASE_URL }}
          JDBC_DATABASE_USERNAME: ${{ secrets.JDBC_DATABASE_USERNAME }}
          JDBC_DATABASE_PASSWORD: ${{ secrets.JDBC_DATABASE_PASSWORD }}

      - name: Configure Deployment
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/github-actions-key
          chmod 600 ~/.ssh/github-actions-key
          cat >>~/.ssh/config <<END
          Host virtualMachine
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/github-actions-key
            StrictHostKeyChecking no
          END
        env:
          SSH_HOST: ${{ secrets.SERVER_IP }}
          SSH_USER: ${{ env.USERNAME_SERVER }}
          SSH_KEY: ${{ secrets.KEY_SSL }}

      #tranfiere el archivo .jar al servidor, cierra cualquier proceso anterios y ejecuta el nuevo archivo en segundo plano
      - name: Deploy
        run: | 
          scp target/*.jar virtualMachine:./repository/authBackend/javaAppAuthBackend.jar
          ssh virtualMachine "pkill java"
          ssh virtualMachine "nohup java -jar ./repository/authBackend/javaAppAuthBackend.jar > authBack.log 2>&1 &"

      - name: Notify
        run: echo 'DEPLOYMENT SUCCESSFUL'